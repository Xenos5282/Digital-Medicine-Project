# -*- coding: utf-8 -*-
"""Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1soaNqzKpgEebVn4DJ_arayBBjMcDkF1d
"""

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 1.x
import tensorflow as tf
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt
import numpy as np
rng = np.random

# Parameters

learning_rate = 0.01
training_epochs = 5000
display_step = 100

def load_data(file, col1='x', col2='y'):
  df = pd.read_csv(file)
  df = df[[col1, col2]]
  df = df.rename(columns={col1:'x', col2:'y'})
  df = df[-3:]
  df = df[['x', 'y']]
  return df

def normalize_y(df):
  y = np.asarray(df['y'])
  max_y = len(str(max(y)))
  scaler = pow(10, max_y)
  y = y / scaler
  df['y'] = y
  return df

def preprocess():
  df = load_data('india level data.csv', 'year', 'population')
  df = normalize_y(df)
  return df

df = preprocess()

df = df.reset_index()
train_X = np.asarray(df.index)
train_Y = np.asarray(df['y'])
n_samples = train_X.shape[0]

train_X, train_Y

X = tf.placeholder("float")
Y = tf.placeholder("float")
W = tf.Variable(rng.randn(), name="weight")
b = tf.Variable(rng.randn(), name="bias")
init = tf.global_variables_initializer()

pred = tf.add(tf.multiply(X, W), b)

cost = tf.reduce_sum(tf.pow(pred-Y, 2))/(2*n_samples)
optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(cost)

saver = tf.train.Saver()

with tf.Session() as sess:
    sess.run(init)

    for epoch in range(training_epochs):
        for (x, y) in zip(train_X, train_Y):
            sess.run(optimizer, feed_dict={X: x, Y: y})

        if (epoch+1) % display_step == 0:
            c = sess.run(cost, feed_dict={X: train_X, Y:train_Y})
            print("Epoch:", '%04d' % (epoch+1), "cost=", "{:.9f}".format(c), "W=", sess.run(W), "b=", sess.run(b))

    print("Optimization Finished!")
    training_cost = sess.run(cost, feed_dict={X: train_X, Y: train_Y})
    print("Training cost=", training_cost, "W=", sess.run(W), "b=", sess.run(b), '\n')


    save_path = saver.save(sess, "Model/model.ckpt")
    print("Model saved in file: %s" % save_path)

  
    plt.scatter(train_X, train_Y, label='Original data')
    plt.plot(train_X, sess.run(W) * train_X + sess.run(b), 'red',label='Fitted Line')
    plt.legend()
    plt.savefig('result.png')
    plt.show()

def predict(year):
  year = year - 1901          #To Convert year into index
  year = year//10             #    ""
  with tf.Session() as sess:
    saver.restore(sess, 'Model/model.ckpt')
    print('Model Restored')
    return sess.run(W) * year + sess.run(b)

years = [2021, 2031, 2041, 2051]
for year in years:
  print(predict(year))

